using System.Linq;
using System.Numerics;
using System.Text;
using Content.Client.Message;
using Robust.Client.Animations;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.Player;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Animations;
using Robust.Shared.Console;
using Robust.Shared.Random;
using Robust.Shared.Timing;

namespace Content.Client.UserInterface.Controls;

[GenerateTypedNameReferences, Virtual]
public partial class RadialContainer : Control
{
    private EntityUid? _attachedEntity;
    private bool _isAttached = false;

    private bool _isOpened = false;

    private string _backgroundTexture = "/Textures/Interface/Default/SlotBackground.png";

    private const int MaxButtons = 8;

    private const string MoveAnimationKey = "move";
    private const string InSizeAnimationKey = "insize";
    private const string OutSizeAnimationKey = "outsize";

    /// <summary>
    /// Fired, when radial was closed
    /// </summary>
    public Action? Closed;

    /// <summary>
    /// Radial item size, when cursor was focused on button
    /// </summary>
    public float FocusSize { get; set; } = 64f;

    /// <summary>
    /// Normal radial item size, when cursor not focused
    /// </summary>
    public float NormalSize { get; set; } = 50f;

    /// <summary>
    /// Items moving animation time, when radial was opened
    /// </summary>
    public float MoveAnimationTime { get; set; } = 0.3f;

    /// <summary>
    /// Item focus sizing animation, when cursor focused and leaved
    /// </summary>
    public float FocusAnimationTime { get; set; } = 0.25f;

    /// <summary>
    /// Show or not item action text on radial menu
    /// </summary>
    public bool ActionVisible = true;

    /// <summary>
    /// Used for UIController! Radial menu position offset
    /// </summary>
    public float VerticalOffset = 0.0f;

    /// <summary>
    /// Used for UIController! Radius, where is container was available
    /// </summary>
    public float VisionRadius = 10.0f;

    public RadialContainer() : base()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
    }

    // TODO: Move into UIController | I mean - we should add controller into WindowRoot with UIController
    public void Open(Vector2 position)
    {
        AddToRoot();
        LayoutContainer.SetPosition(this, position);
        UpdateButtons();
    }

    // TODO: Move into UIController | I mean - we should add controller into WindowRoot with UIController
    public void OpenCentered()
    {
        AddToRoot();
        if (Parent != null)
            LayoutContainer.SetPosition(this, (Parent.Size/2) - (this.Size/2));
        else
            LayoutContainer.SetPosition(this, (UserInterfaceManager.MainViewport.Size/2) - (this.Size/2));
        UpdateButtons();
    }

    // TODO: Move into UIController | I mean - we should add controller into WindowRoot with UIController
    public void OpenCenteredLeft() => OpenCenteredAt(new Vector2(0.25f, 0.5f));

    // TODO: Move into UIController | I mean - we should add controller into WindowRoot with UIController
    public void OpenCenteredAt(Vector2 position)
    {
        AddToRoot();
        if (Parent == null)
            return;
        LayoutContainer.SetPosition(this, (Parent.Size * position) - (this.Size/2));
        UpdateButtons();
    }

    // TODO: Move into UIController | I mean - we should add controller into WindowRoot with UIController
    /// <summary>
    /// Open on attached entity in the world.
    /// </summary>
    public void OpenAttached(EntityUid uid)
    {
        if (uid == EntityUid.Invalid)
            return;

        AddToRoot();
        _attachedEntity = uid;
        _isAttached = true;
        UpdateButtons();
    }

    // TODO: Move into UIController | I mean - we should add controller into WindowRoot with UIController
    /// <summary>
    /// Open on our (player) attached entity.
    /// </summary>
    public void OpenAttachedLocalPlayer()
    {
        var localPlayer = IoCManager.Resolve<IPlayerManager>().LocalPlayer;
        if (localPlayer == null)
            return;

        AddToRoot();
        _attachedEntity = localPlayer.ControlledEntity;
        _isAttached = true;
        UpdateButtons();
    }

    public void Close(bool canDispose = true)
    {
        Parent?.RemoveChild(this);
        Visible = false;
        _isOpened = false;
        Closed?.Invoke();
        if (canDispose)
            Dispose();
    }

    public RadialItem AddButton(RadialItem button)
    {
        Layout.AddChild(button);
        return button;
    }


    public RadialItem AddButton(string action, string? texture = null)
    {
        var button = new RadialItem();
        button.Content = action;
        button.Controller.TexturePath = _backgroundTexture;

        if (texture != null)
           button.BackgroundTexture.TexturePath = texture;

        Layout.AddChild(button);

        return button;
    }

    public RadialItem AddButton(string action, Texture? texture)
    {
        var button = new RadialItem();
        button.Content = action;
        button.Controller.TexturePath = _backgroundTexture;

        if (texture != null)
            button.BackgroundTexture.Texture = texture;

        Layout.AddChild(button);

        return button;
    }

    private void AddToRoot()
    {
        if (_isOpened)
            return;
        UserInterfaceManager.WindowRoot.AddChild(this);
        _isOpened = !_isOpened;
    }

    private void UpdateButtons()
    {
        Visible = true;

        var angleDegrees = 360/Layout.ChildCount;
        var stepAngle = -angleDegrees + -90;
        var distance = GetDistance();

        foreach (var child in Layout.Children)
        {
            var button = (RadialItem)child;
            button.ButtonSize = new Vector2(NormalSize, NormalSize);
            stepAngle += angleDegrees;
            var pos = GetPointFromPolar(stepAngle, distance);
            PlayRadialAnimation(button, pos, MoveAnimationKey);

            button.Controller.OnMouseEntered += (_) =>
            {
                PlaySizeAnimation(button, FocusSize, OutSizeAnimationKey, InSizeAnimationKey);
                ActionLabel.SetMarkup(button.Content ?? string.Empty);
                ActionLabel.Visible = ActionVisible;
            };
            button.Controller.OnMouseExited += (_) =>
            {
                PlaySizeAnimation(button, NormalSize, InSizeAnimationKey, OutSizeAnimationKey);
                ActionLabel.Visible = false;
            };
        }

        CloseButton.ButtonSize = new Vector2(NormalSize, NormalSize);

        CloseButton.Controller.OnMouseEntered += (_) =>
        {
            PlaySizeAnimation(CloseButton, FocusSize, OutSizeAnimationKey, InSizeAnimationKey);
            ActionLabel.SetMarkup(CloseButton.Content ?? string.Empty);
            ActionLabel.Visible = true;
        };

        CloseButton.Controller.OnMouseExited += (_) =>
        {
            PlaySizeAnimation(CloseButton, NormalSize, InSizeAnimationKey, OutSizeAnimationKey);
            ActionLabel.Visible = false;
        };
        CloseButton.Controller.OnPressed += (_) =>
        {
            Close();
        };
    }

    private void PlayRadialAnimation(Control button, Vector2 pos, string playKey)
    {
        var anim = new Animation
        {
            Length = TimeSpan.FromMilliseconds(MoveAnimationTime * 1000),
            AnimationTracks =
            {
                new AnimationTrackControlProperty
                {
                    Property = nameof(RadialItem.Offset),
                    InterpolationMode = AnimationInterpolationMode.Linear,
                    KeyFrames =
                    {
                        new AnimationTrackProperty.KeyFrame(new Vector2(0,0), 0f),
                        new AnimationTrackProperty.KeyFrame(pos, MoveAnimationTime)
                    }
                }
            }
        };
        if (!button.HasRunningAnimation(playKey))
            button.PlayAnimation(anim, playKey);
    }

    private void PlaySizeAnimation(Control button, float size, string playKey, string? stopKey)
    {
        var anim = new Animation
        {
            Length = TimeSpan.FromMilliseconds(FocusAnimationTime * 1000),
            AnimationTracks =
            {
                new AnimationTrackControlProperty
                {
                    Property = nameof(RadialItem.ButtonSize),
                    InterpolationMode = AnimationInterpolationMode.Linear,
                    KeyFrames =
                    {
                        new AnimationTrackProperty.KeyFrame(button.Size, 0f),
                        new AnimationTrackProperty.KeyFrame(new Vector2(size, size), FocusAnimationTime)
                    }
                }
            }
        };

        if (stopKey != null && button.HasRunningAnimation(stopKey))
            button.StopAnimation(stopKey);
        if (!button.HasRunningAnimation(playKey))
            button.PlayAnimation(anim, playKey);
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        foreach (var child in Layout.Children)
        {
            var button = (RadialItem)child;
            LayoutContainer.SetPosition(child, button.Offset - (button.Size/2));
        }

        LayoutContainer.SetPosition(CloseButton, CloseButton.Offset - (CloseButton.Size/2));
        LayoutContainer.SetPosition(ActionLabel,
            new Vector2(0 - (GetTextWidth(ActionLabel) / 4), 18.5f + GetDistance(4.5f) ));
    }

    // TODO: Move into UIController
    protected override void FrameUpdate(FrameEventArgs args)
    {
        if (!_isAttached)
            return;

        base.FrameUpdate(args);

        var entityManager = IoCManager.Resolve<IEntityManager>();
        var eyeManager = IoCManager.Resolve<IEyeManager>();

        if (entityManager.Deleted(_attachedEntity))
        {
            Timer.Spawn(0, Die);
            return;
        }

        if (!entityManager.TryGetComponent<TransformComponent>(_attachedEntity, out var xform) || xform.MapID != eyeManager.CurrentMap)
        {
            return;
        }

        var localPlayer = IoCManager.Resolve<IPlayerManager>().LocalPlayer;
        if (localPlayer == null)
            return;

        // Check distance beetween entities
        if (entityManager.TryGetComponent<TransformComponent>(localPlayer.ControlledEntity, out var myxform))
        {
            var onePoint = xform.WorldPosition;
            var twoPoint = myxform.WorldPosition;
            var distance = (onePoint - twoPoint).Length();

            if (VisionRadius < distance)
            {
                Timer.Spawn(0, Die);
                return;
            }
        }

        var offset = (-eyeManager.CurrentEye.Rotation).ToWorldVec() * -VerticalOffset;
        var worldPos = xform.WorldPosition + offset;

        var lowerCenter = eyeManager.WorldToScreen(worldPos) / UIScale;
        var screenPos = lowerCenter - new Vector2(this.DesiredSize.X / 2, this.DesiredSize.Y / 2);
        // Round to nearest 0.5
        screenPos = (screenPos * 2).Rounded() / 2;
        LayoutContainer.SetPosition(this, screenPos);
    }

    private int GetTextWidth(RichTextLabel text)
    {
        var font = GetFont(text);
        var msg = text.GetMessage();
        if (msg == null)
            return 0;

        var width = 0;

        foreach (var t in msg)
        {
            var metrics = font.GetCharMetrics(new Rune(t), 1);

            if (metrics != null)
                width += metrics.Value.Width + metrics.Value.Advance;
        }

        return width;
    }

    private void Die()
    {
        if (Disposed)
            return;

        Close();
    }

    private Font GetFont(Control element)
    {
        if (element.TryGetStyleProperty<Font>("font", out var font))
        {
            return font;
        }

        return UserInterfaceManager.ThemeDefaults.DefaultFont;
    }

    private float GetDistance(float offset = 0.0f)
    {
        var distance = FocusSize * 1.2f;
        var children = Layout.Children.Count();

        if (children <= MaxButtons)
            return distance + offset;

        for (var i = 0; i < (children - MaxButtons); i++)
        {
            distance += (NormalSize / 3);
        }

        return distance + offset;
    }

    private static Vector2 GetPointFromPolar(double angleDegrees, double distance)
    {
        var angleRadians = angleDegrees * (Math.PI / 180.0);

        var x = distance * Math.Cos(angleRadians);
        var y = distance * Math.Sin(angleRadians);

        return new Vector2((float)Math.Round(x), (float)Math.Round(y));
    }
}
